apiVersion: apps/v1
kind: Deployment
metadata:
  name: ff-pushpin-service
  namespace: {{ .Release.Namespace }}
  labels:
    app: ff-pushpin-service
    {{- include "ff-pushpin-service.labels" . | nindent 4 }}
spec:
  progressDeadlineSeconds: 300
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: {{ .Values.maxSurge }}
      maxUnavailable: {{ .Values.maxUnavailable }}
  selector:
    matchLabels:
      app: ff-pushpin-service
      {{- include "ff-pushpin-service.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        app: ff-pushpin-service
        {{- include "ff-pushpin-service.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "ff-pushpin-service.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      terminationGracePeriodSeconds: 30
      # Does it require any dependency on other service to startup
      # initContainers: 
      containers:
        - name: ff-pushpin-service
          image: {{ include "common.images.image" (dict "imageRoot" .Values.image "global" .Values.global) }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          securityContext:
              {{- toYaml .Values.securityContext | nindent 12 }}
          ports:
          - name: http-ff-pushpin-service
            containerPort: {{.Values.service.port}}
            protocol: "TCP"
          - name: grpc-gitsync-ff-pushpin-service
            containerPort: {{.Values.service.grpcport}}
            protocol: "TCP"
          resources:
              {{- toYaml .Values.resources | nindent 12 }}
          env:
            - name : ANALYTICS_DB_PASS
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.timescaleSecret.password.name }}
                  key: {{ .Values.timescaleSecret.password.key }}
            - name: ANALYTICS_DB_USER
              value: postgres
            - name : DB_PASS
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.timescaleSecret.password.name }}
                  key: {{ .Values.timescaleSecret.password.key }}
            - name: DB_USER
              value: postgres
          envFrom:
          - configMapRef:
              name: ff-pushpin-service
          readinessProbe:
            httpGet:
              path: /api/1.0/health
              port: 3000
            initialDelaySeconds: 60
            timeoutSeconds: 5
            periodSeconds: 5
            failureThreshold: 8
          livenessProbe:
            httpGet:
              path: /api/1.0/version
              port: 3000
            initialDelaySeconds: 40
            timeoutSeconds: 5
            periodSeconds: 10
            failureThreshold: 20
      {{ if or .Values.global.ha .Values.affinity }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - ff-pushpin-service
            topologyKey: "kubernetes.io/hostname"
      {{- with .Values.affinity }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{ end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
